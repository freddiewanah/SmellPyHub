    async def test_grandchild_no_sighup(self):
        # Create a child process that will write to a file if it receives a SIGHUP
        child = create_tmp_test(
            """
            import signal
            import sys
            import asyncio

            async def main():
                output_file = sys.argv[1]
                with open(output_file, "w") as f:
                    def handle_sighup(signum, frame):
                        f.write("got signal %d" % signum)
                        sys.exit(signum)

                    signal.signal(signal.SIGHUP, handle_sighup)
                    await asyncio.sleep(2)  # Wait for potential SIGHUP
                    f.write("made it!\\n")

            asyncio.run(main())
            """
        )

        # Create a parent process that will terminate before the child writes to the output file, potentially causing a SIGHUP
        parent = create_tmp_test(
            """
            import os
            import asyncio
            import sys

            async def main():
                child_file = sys.argv[1]
                output_file = sys.argv[2]
                python_name = os.path.basename(sys.executable)
                os.spawnlp(os.P_NOWAIT, python_name, python_name, child_file, output_file)
                await asyncio.sleep(1)  # Give child a chance to set up

            asyncio.run(main())
            """
        )

        output_file = tempfile.NamedTemporaryFile(delete=True)
        await python(parent.name, child.name, output_file.name)
        await asyncio.sleep(3)  # Wait for child process to potentially receive SIGHUP and write to file
        out = output_file.readlines()[0]
        self.assertEqual(out, b"made it!\n")